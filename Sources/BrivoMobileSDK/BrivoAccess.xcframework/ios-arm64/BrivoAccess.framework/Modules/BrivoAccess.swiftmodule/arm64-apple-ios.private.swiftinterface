// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name BrivoAccess
import BrivoBLE
import BrivoCore
import BrivoLocalAuthentication
import BrivoOnAir
import CoreBluetooth.CBManager
import CoreBluetooth
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers public class BrivoSDKAccessErrors : ObjectiveC.NSObject {
  public static let unknownError: BrivoCore.BrivoError
  public static let notInitializedError: BrivoCore.BrivoError
  public static let notConfiguredForLocalStorageError: BrivoCore.BrivoError
  public static let noPassesFoundInLocalStorageError: BrivoCore.BrivoError
  public static let accessPointNotFoundInLocalStorageError: BrivoCore.BrivoError
  public static let passNotFoundInLocalStorageError: BrivoCore.BrivoError
  public static let missingBLECredentialError: BrivoCore.BrivoError
  public static let accessPointInvalidDoorType: BrivoCore.BrivoError
  public static let missingNetworkConnectionError: BrivoCore.BrivoError
  public static let missingReaderUUIDError: BrivoCore.BrivoError
  public static let accessPointUnsupportedDoorType: BrivoCore.BrivoError
  public static func brivoErrorWithDescription(_ description: Swift.String) -> BrivoCore.BrivoError
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BrivoSDKAccess : ObjectiveC.NSObject, BrivoAccess.IBrivoSDKAccess {
  public static func instance() -> BrivoAccess.BrivoSDKAccess
  public var onBluetoothStateUpdated: ((CoreBluetooth.CBManagerState) -> Swift.Void)? {
    get
    set
  }
  public func turnOnCentral()
  public func getBLEState() -> CoreBluetooth.CBManagerState
  public func onBleChanged(completion: @escaping (CoreBluetooth.CBManagerState) -> Swift.Void) -> Foundation.NSNumber?
  public func removeCompletionFor(id: Foundation.NSNumber)
  #if compiler(>=5.3) && $AsyncAwait
  public func unlockAccessPoint(selectedAccessPoint: BrivoOnAir.BrivoSelectedAccessPoint, cancellationSignal: BrivoCore.CancellationSignal?) async -> _Concurrency.AsyncThrowingStream<BrivoCore.BrivoResult, any Swift.Error>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func unlockAccessPoint(passId: Swift.String, accessPointId: Swift.String, cancellationSignal: BrivoCore.CancellationSignal?) async -> _Concurrency.AsyncThrowingStream<BrivoCore.BrivoResult, any Swift.Error>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func lockAccessPoint(selectedAccessPoint: BrivoOnAir.BrivoSelectedAccessPoint, cancellationSignal: BrivoCore.CancellationSignal?) async -> _Concurrency.AsyncThrowingStream<BrivoCore.BrivoResult, any Swift.Error>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func lockAccessPoint(passId: Swift.String, accessPointId: Swift.String, cancellationSignal: BrivoCore.CancellationSignal?) async -> _Concurrency.AsyncThrowingStream<BrivoCore.BrivoResult, any Swift.Error>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func unlockNearestBLEAccessPoint(passes: [BrivoOnAir.BrivoOnairPass], cancellationSignal: BrivoCore.CancellationSignal?) async -> _Concurrency.AsyncThrowingStream<BrivoCore.BrivoResult, any Swift.Error>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func unlockNearestBLEAccessPoint(pass: BrivoOnAir.BrivoOnairPass, siteId: Swift.Int, cancellationSignal: BrivoCore.CancellationSignal?) async -> _Concurrency.AsyncThrowingStream<BrivoCore.BrivoResult, any Swift.Error>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func unlockNearestBLEAccessPoint(cancellationSignal: BrivoCore.CancellationSignal?) async -> _Concurrency.AsyncThrowingStream<BrivoCore.BrivoResult, any Swift.Error>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func requestExternalCredentialsFromOnAir(tokens: BrivoCore.BrivoTokens, accessPointId: Swift.String, requestData: Swift.String) async -> Swift.Result<Swift.String?, BrivoCore.BrivoError>
  #endif
  public func provideExternalCredentialsResponseToOnAir(tokens: BrivoCore.BrivoTokens, accessPointId: Swift.String, requestData: Swift.String, onSuccess: BrivoAccess.ControlLockUnlockOnSuccessType?, onFailure: BrivoAccess.OnFailureType?)
  @objc deinit
}
public typealias ControlLockUnlockOnSuccessType = (Swift.String?) -> Swift.Void
public typealias OnUnlockAccessPointSuccessType = () -> Swift.Void
public typealias OnFailureType = (BrivoCore.BrivoError) -> Swift.Void
public protocol IBrivoSDKAccess {
  static func instance() -> BrivoAccess.BrivoSDKAccess
  #if compiler(>=5.3) && $AsyncAwait
  func unlockAccessPoint(selectedAccessPoint: BrivoOnAir.BrivoSelectedAccessPoint, cancellationSignal: BrivoCore.CancellationSignal?) async -> _Concurrency.AsyncThrowingStream<BrivoCore.BrivoResult, any Swift.Error>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func unlockAccessPoint(passId: Swift.String, accessPointId: Swift.String, cancellationSignal: BrivoCore.CancellationSignal?) async -> _Concurrency.AsyncThrowingStream<BrivoCore.BrivoResult, any Swift.Error>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func lockAccessPoint(selectedAccessPoint: BrivoOnAir.BrivoSelectedAccessPoint, cancellationSignal: BrivoCore.CancellationSignal?) async -> _Concurrency.AsyncThrowingStream<BrivoCore.BrivoResult, any Swift.Error>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func lockAccessPoint(passId: Swift.String, accessPointId: Swift.String, cancellationSignal: BrivoCore.CancellationSignal?) async -> _Concurrency.AsyncThrowingStream<BrivoCore.BrivoResult, any Swift.Error>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func unlockNearestBLEAccessPoint(passes: [BrivoOnAir.BrivoOnairPass], cancellationSignal: BrivoCore.CancellationSignal?) async -> _Concurrency.AsyncThrowingStream<BrivoCore.BrivoResult, any Swift.Error>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func unlockNearestBLEAccessPoint(pass: BrivoOnAir.BrivoOnairPass, siteId: Swift.Int, cancellationSignal: BrivoCore.CancellationSignal?) async -> _Concurrency.AsyncThrowingStream<BrivoCore.BrivoResult, any Swift.Error>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func unlockNearestBLEAccessPoint(cancellationSignal: BrivoCore.CancellationSignal?) async -> _Concurrency.AsyncThrowingStream<BrivoCore.BrivoResult, any Swift.Error>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func requestExternalCredentialsFromOnAir(tokens: BrivoCore.BrivoTokens, accessPointId: Swift.String, requestData: Swift.String) async -> Swift.Result<Swift.String?, BrivoCore.BrivoError>
  #endif
  func turnOnCentral()
  func getBLEState() -> CoreBluetooth.CBManagerState
  func onBleChanged(completion: @escaping (CoreBluetooth.CBManagerState) -> Swift.Void) -> Foundation.NSNumber?
  func removeCompletionFor(id: Foundation.NSNumber)
}
