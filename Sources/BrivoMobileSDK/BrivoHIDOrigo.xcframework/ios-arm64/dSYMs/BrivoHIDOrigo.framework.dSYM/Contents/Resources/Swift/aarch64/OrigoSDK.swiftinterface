// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name OrigoSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AuthenticationServices
import CommonCrypto
import CommonCrypto.CommonCryptor
import CommonCrypto.CommonDigest
import CoreData
import CoreLocation
import CoreNFC
import CryptoKit
import Foundation
import MetricKit
import OrigoMelSDK
@_exported import OrigoSDK
import PassKit
import Security
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _CoreNFC_UIKit
import _StringProcessing
import _SwiftConcurrencyShims
extension Foundation.UserDefaults {
  public func isUserScanModeChanged(mode: Swift.Int, openingType: [Swift.Int], lockServiceCode: [Swift.Int]) -> Swift.Bool
  public func saveReaderScanParameter(scanMode: Swift.Int, openingType: [Swift.Int], lockServiceCode: [Swift.Int])
  public func getReaderScanParmeter() -> OrigoSDK.ReaderScanData?
}
@objc public enum HTTPStatusCode : Swift.Int {
  case kHTTPStatusCodeContinue = 100
  case kHTTPStatusCodeSwitchingProtocols = 101
  case kHTTPStatusCodeProcessing = 102
  case kHTTPStatusCodeOK = 200
  case kHTTPStatusCodeCreated = 201
  case kHTTPStatusCodeAccepted = 202
  case kHTTPStatusCodeNonAuthoritativeInformation = 203
  case kHTTPStatusCodeNoContent = 204
  case kHTTPStatusCodeResetContent = 205
  case kHTTPStatusCodePartialContent = 206
  case kHTTPStatusCodeMultiStatus = 207
  case kHTTPStatusCodeAlreadyReported = 208
  case kHTTPStatusCodeIMUsed = 226
  case kHTTPStatusCodeLowOnStorageSpace = 250
  case kHTTPStatusCodeMultipleChoices = 300
  case kHTTPStatusCodeMovedPermanently = 301
  case kHTTPStatusCodeFound = 302
  case kHTTPStatusCodeSeeOther = 303
  case kHTTPStatusCodeNotModified = 304
  case kHTTPStatusCodeUseProxy = 305
  case kHTTPStatusCodeSwitchProxy = 306
  case kHTTPStatusCodeTemporaryRedirect = 307
  case kHTTPStatusCodePermanentRedirect = 308
  case kHTTPStatusCodeBadRequest = 400
  case kHTTPStatusCodeUnauthorized = 401
  case kHTTPStatusCodePaymentRequired = 402
  case kHTTPStatusCodeForbidden = 403
  case kHTTPStatusCodeNotFound = 404
  case kHTTPStatusCodeMethodNotAllowed = 405
  case kHTTPStatusCodeNotAcceptable = 406
  case kHTTPStatusCodeProxyAuthenticationRequired = 407
  case kHTTPStatusCodeRequestTimeout = 408
  case kHTTPStatusCodeConflict = 409
  case kHTTPStatusCodeGone = 410
  case kHTTPStatusCodeLengthRequired = 411
  case kHTTPStatusCodePreconditionFailed = 412
  case kHTTPStatusCodeRequestEntityTooLarge = 413
  case kHTTPStatusCodeRequestURITooLong = 414
  case kHTTPStatusCodeUnsupportedMediaType = 415
  case kHTTPStatusCodeRequestedRangeNotSatisfiable = 416
  case kHTTPStatusCodeExpectationFailed = 417
  case kHTTPStatusCodeIAmATeapot = 418
  case kHTTPStatusCodeEnhanceYourCalm = 420
  case kHTTPStatusCodeUnprocessableEntity = 422
  case kHTTPStatusCodeLocked = 423
  case kHTTPStatusCodeFailedDependency = 424
  case kHTTPStatusCodeUnorderedCollection = 425
  case kHTTPStatusCodeUpgradeRequired = 426
  case kHTTPStatusCodePreconditionRequired = 428
  case kHTTPStatusCodeTooManyRequests = 429
  case kHTTPStatusCodeRequestHeaderFieldsTooLarge = 431
  case kHTTPStatusCodeNoResponse = 444
  case kHTTPStatusCodeRetryWith = 449
  case kHTTPStatusCodeBlockedByWindowsParentalControls = 450
  case kHTTPStatusCodeParameterNotUnderstood = 451
  case kHTTPStatusCodeConferenceNotFound = 452
  case kHTTPStatusCodeNotEnoughBandwidth = 453
  case kHTTPStatusCodeSessionNotFound = 454
  case kHTTPStatusCodeMethodNotValidInThisState = 455
  case kHTTPStatusCodeHeaderFieldNotValidForResource = 456
  case kHTTPStatusCodeInvalidRange = 457
  case kHTTPStatusCodeParameterIsReadOnly = 458
  case kHTTPStatusCodeAggregateOperationNotAllowed = 459
  case kHTTPStatusCodeOnlyAggregateOperationAllowed = 460
  case kHTTPStatusCodeUnsupportedTransport = 461
  case kHTTPStatusCodeDestinationUnreachable = 462
  case kHTTPStatusCodeRequestHeaderTooLarge = 494
  case kHTTPStatusCodeCertError = 495
  case kHTTPStatusCodeNoCert = 496
  case kHTTPStatusCodeHTTPToHTTPS = 497
  case kHTTPStatusCodeClientClosedRequest = 499
  case kHTTPStatusCodeInternalServerError = 500
  case kHTTPStatusCodeNotImplemented = 501
  case kHTTPStatusCodeBadGateway = 502
  case kHTTPStatusCodeServiceUnavailable = 503
  case kHTTPStatusCodeGatewayTimeout = 504
  case kHTTPStatusCodeHTTPVersionNotSupported = 505
  case kHTTPStatusCodeVariantAlsoNegotiates = 506
  case kHTTPStatusCodeInsufficientStorage = 507
  case kHTTPStatusCodeLoopDetected = 508
  case kHTTPStatusCodeBandwidthLimitExceeded = 509
  case kHTTPStatusCodeNotExtended = 510
  case kHTTPStatusCodeNetworkAuthenticationRequired = 511
  case kHTTPStatusCodeOptionNotSupported = 551
  case kHTTPStatusCodeNetworkReadTimeoutError = 598
  case kHTTPStatusCodeNetworkConnectTimeoutError = 599
  case kHTTPOrigoUserNotFound = 700
  case kHTTPOrigoOrgNotFound = 701
  case kHTTPOrigoCredentialInventLow = 702
  case kHTTPOrigoOrgMigrationInProgress = 703
  case kHTTPOrigoSubscribeNotActive = 704
  case kHTTPOrigoPassTemplateNotFound = 705
  case kHTTPOrigoSSOAccessTokenExpired = 706
  case kHTTPOrigoSSOAccessTokenInvalid = 707
  case kHTTPOrigoSSOAccessTokenInvalidIssuer = 708
  case kHTTPOrigoSSOAccessTokenRoleNotAvailable = 709
  case kHTTPStatusCodeUnsupportedService = 710
  case kHTTPStatusCodeIssuanceTokenExpired = 711
  case kHTTPOrigoInvalidDateTime = 712
  case kHTTPOrigoInvalidIssuanceToken = 901
  case kHTTPStatusCodeDefault = 1355
  case kHTTPOrigoEnvironmentMismatchError = 12234
  case kHTTPStatusCodeMultipleLocationServicesNotSupported = 12235
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class OrigoSSOTokenStorage : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public class func getSSOToken(completionHandler: @escaping ((Swift.String, Swift.Bool) -> Swift.Void))
  @objc public class func removeSSOToken(completionHandler: (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
public typealias OrigoRouterCompletion = (_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> ()
extension Swift.Array {
  public func mapWithIndex<T>(f: (Swift.Int, Element) -> T) -> [T]
}
@_hasMissingDesignatedInitializers public class Constants {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class OrigoOpenIDUserDefaults : ObjectiveC.NSObject {
  @objc public var environmentCode: Swift.Int {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_cdecl("debugger_callback")
public func debuggerDetected()
@_cdecl("jailbreak_callback")
public func jailbreakDetected()
@_cdecl("hooking_callback")
public func hookingonJailbreakDetected()
@_hasMissingDesignatedInitializers @objc public class FavoriteCallBack : ObjectiveC.NSObject {
  @objc public var status: Swift.Bool
  @objc public var error: (any Swift.Error)?
  @objc public var favoriteReaders: [OrigoSDK.OrigoKeysReader]?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class FavoriteReaderManager : ObjectiveC.NSObject {
  @objc public class func addFavorite(reader: OrigoSDK.OrigoKeysReader) -> OrigoSDK.FavoriteCallBack
  @objc public class func deleteFavorite(reader: OrigoSDK.OrigoKeysReader) -> OrigoSDK.FavoriteCallBack
  @objc public class func deleteAllFavoriteReaders() -> OrigoSDK.FavoriteCallBack
  @objc public class func listFavoriteReaders() -> OrigoSDK.FavoriteCallBack
  @objc public class func getFavoriteReaderToConnect(nearbyReaders: [OrigoSDK.OrigoKeysReader]) -> OrigoSDK.OrigoKeysReader?
  @objc public class func calculateRSSIValue(favReaders: [OrigoSDK.OrigoKeysReader]?, nearbyReaders: [OrigoSDK.OrigoKeysReader]) -> OrigoSDK.OrigoKeysReader?
  @objc public class func getPrioritizedNearByReaders(nearbyReaders: [OrigoSDK.OrigoKeysReader]) -> [OrigoSDK.OrigoKeysReader]?
  @objc public class func isFavoriteReader(reader: OrigoSDK.OrigoKeysReader) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public enum SecureStoreError : Swift.Error {
  case string2DataConversionError
  case data2StringConversionError
  case unhandledError(message: Swift.String)
}
extension OrigoSDK.SecureStoreError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct SymmetricKey : OrigoSDK.Encryptable, OrigoSDK.Decryptable {
  public enum SymmetricKeyError : Swift.Error {
    case invalidKeySize
    case encryptError
    case decryptError
    public static func == (a: OrigoSDK.SymmetricKey.SymmetricKeyError, b: OrigoSDK.SymmetricKey.SymmetricKeyError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: OrigoSDK.SymmetricKey.Options
  public let cryptoKey: Foundation.Data
  public let IV: Foundation.Data
  public var hmacKey: Foundation.Data?
  public struct Options {
    public let keySize: Swift.Int
    public let algoritm: CommonCrypto.CCAlgorithm
    public let options: CommonCrypto.CCOptions
    public var algoritmBlockSize: Swift.Int {
      get
    }
  }
  public static var DefaultOptions: OrigoSDK.SymmetricKey.Options {
    get
  }
  public init(options: OrigoSDK.SymmetricKey.Options = DefaultOptions)
  public init(key: Foundation.Data, IV: Foundation.Data = Data()) throws
  public init(key: Foundation.Data, IV: Foundation.Data = Data(), options: OrigoSDK.SymmetricKey.Options = SymmetricKey.DefaultOptions) throws
  public func encrypt(_ data: Foundation.Data) throws -> Foundation.Data
  public func decrypt(_ data: Foundation.Data) throws -> Foundation.Data
  public func signature(_ data: Foundation.Data) throws -> Foundation.Data
  public func verify(_ data: Foundation.Data, signature: Foundation.Data) throws -> Swift.Bool
}
public protocol Encryptable {
  func encrypt(_ data: Foundation.Data) throws -> Foundation.Data
  func verify(_ data: Foundation.Data, signature: Foundation.Data) throws -> Swift.Bool
}
public protocol Decryptable {
  func decrypt(_ data: Foundation.Data) throws -> Foundation.Data
  func signature(_ data: Foundation.Data) throws -> Foundation.Data
}
extension Swift.String {
  public static func randomString(_ length: Swift.Int) -> Swift.String
}
extension Foundation.Data {
  public var SHA256: Foundation.Data {
    get
  }
  public static func randomData(_ length: Swift.Int) -> Foundation.Data
}
@objc public enum OrigoKeysNetworkErrorCode : Swift.Int {
  case errorCodeInternal = 10099
  case errorCodeTemporarilyServerNotReachable = 10703
  case errorCodeServerUnreachable = 10702
  case errorCodeSDKIncompatible = 10701
  case applicationNameNotAvailable = 15902
  case origoInvalidIssuanceToken = 901
  case origoEnvironmentMisMatchError = 12234
  case origoMultipleLocationServicesNotSupported = 12235
  case origoIdentityPositioningSubTypeNotSupported = 12236
  case origoKeysErrorCodeUserNotFound = 23100
  case origoKeysErrorCodeOrgNotFound = 23101
  case origoKeysErrorCodeCredentialInventoryLow = 23102
  case origoKeysErrorCodeMigrationInProgress = 23103
  case origoKeysErrorCodeSubscriptionNotActive = 23104
  case origoKeysErrorCodePassTemplateNotFound = 23105
  case origoKeysErrorCodeSSOAccessTokenExpired = 23106
  case origoKeysErrorCodeSSOAccessTokenInvalid = 23107
  case origoKeysErrorCodeSSOAccessTokenInvalidIssuer = 23108
  case origoKeysErrorCodeSSOAccessTokenRoleNotAvailable = 23109
  case origoKeysErrorCodeUnSupportedService = 23110
  case issuanceTokenExpired = 23111
  case errorCodeInvalidDateTime = 23112
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum OrigoKeysPassKitErrorCode : Swift.Int {
  case passKitUnknownError = 15903
  case passKitInvalidDataError = 15904
  case passKitUnsupportedVersionError = 15905
  case passKitInvalidSignature = 15906
  case passKitNotEntitledError = 15907
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum OrigoKeysSecureElementAddPassErrorCode : Swift.Int {
  case secureElementUnknownError = 15920
  case secureElementUserCanceledError = 15921
  case secureElementUnavailableError = 15922
  case secureElementInvalidConfigurationError = 15923
  case secureElementDeviceNotSupportedError = 15924
  case secureElementDeviceNotReadyError = 15925
  case secureElementOSVersionNotSupportedError = 15926
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class OrigoErrorConverter : ObjectiveC.NSObject {
  @objc public class func origoError(with httpErrorCode: OrigoSDK.HTTPStatusCode, withNestedError error: (any Swift.Error)?) -> any Swift.Error
  @objc public class func origoSecureElementErrorHandler(error: (any Swift.Error)?) -> any Swift.Error
  @objc public class func origoPassKitErrorHandler(error: (any Swift.Error)?) -> any Swift.Error
  @objc public class func toErrorCode(fromHttpErrorStatus httpErrorCode: OrigoSDK.HTTPStatusCode) -> OrigoSDK.OrigoKeysNetworkErrorCode
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SafeDictionary<T> {
  public var values: [T] {
    get
  }
  public func setValue(_ key: Swift.String, _ value: T)
  public func value(_ forKey: Swift.String) -> T?
  public func removeValue(_ key: Swift.String)
  public func removeAll()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class OrigoSecuredDataStorage : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public class func registerDefaults(_ values: [Swift.String : Any])
  @objc public class func storeFloatOnSDS(_ value: Swift.Float, key: Swift.String)
  @objc public class func storeDoubleOnSDS(_ value: Swift.Double, key: Swift.String)
  @objc public class func storeIntOnSDS(_ value: Swift.Int64, key: Swift.String)
  @objc public class func storeBoolOnSDS(_ value: Swift.Bool, key: Swift.String)
  @objc public class func storeStringOnSDS(_ value: Swift.String, key: Swift.String)
  @objc deinit
}
extension OrigoSDK.OrigoSecuredDataStorage {
  @objc dynamic public class func fetchFloatFromSDS(_ key: Swift.String) -> Swift.Float
  @objc dynamic public class func fetchDoubleFromSDS(_ key: Swift.String) -> Swift.Double
  @objc dynamic public class func fetchIntFromSDS(_ key: Swift.String) -> Swift.Int64
  @objc dynamic public class func fetchBoolFromSDS(_ key: Swift.String) -> Swift.Bool
  @objc dynamic public class func fetchStringFromSDS(_ key: Swift.String) -> Swift.String?
  @objc dynamic public class func getProvisionKeyChain(_ codeHash: Swift.String, completion: @escaping ((Swift.Bool, Foundation.NSDictionary, (any Swift.Error)?) -> Swift.Void))
  @objc dynamic public class func removeProvisionKeyChain(_ codeHash: Swift.String, completion: @escaping ((Swift.Bool, (any Swift.Error)?) -> Swift.Void))
}
extension OrigoSDK.OrigoSecuredDataStorage {
  @objc dynamic public class func removeValueFromSDS(_ key: Swift.String)
}
extension OrigoSDK.OrigoSecuredDataStorage {
  @objc dynamic public class func savePhoto(urlString: Swift.String, accessToken: Swift.String, uniqueIdentifier: Swift.String, completionHandler: @escaping ((Foundation.Data?, (any Swift.Error)?) -> Swift.Void))
}
extension OrigoSDK.OrigoSecuredDataStorage {
  @objc dynamic public class func storeObjectOnSDS(_ object: Any, key: Swift.String)
  @objc dynamic public class func updateObjectOnSDS(_ object: Any, key: Swift.String)
  @objc dynamic public class func fetchObjectsFromSDS(_ limit: Swift.Int, key: Swift.String) -> [Foundation.Data]?
  @objc dynamic public class func fetchAllObjectsFromSDS(_ key: Swift.String) -> [Foundation.Data]?
  @objc dynamic public class func removeObjectsFromSDS(limit: Swift.Int = 0, key: Swift.String)
}
extension OrigoSDK.OrigoSecuredDataStorage {
  @objc dynamic public class func storeArrayOfStrings(_ values: [Swift.AnyHashable], key: Swift.String)
  @objc dynamic public class func fetchArrayOfStrings(_ key: Swift.String) -> [Swift.AnyHashable]?
}
@_inheritsConvenienceInitializers @objc public class SequenceUtility : ObjectiveC.NSObject {
  @objc public class func getSubtracted(fromList list1: [Swift.String], withList list2: [Swift.String]) -> [Swift.String]
  @objc public class func getIntersection(fromList list1: [Swift.String], withList list2: [Swift.String]) -> [Swift.String]
  @objc public class func convert(list: [Swift.AnyObject], withField field: Swift.String) -> [Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
@objc public class IssuanceTokenParameters : ObjectiveC.NSObject {
  @objc public init(issuanceToken: Swift.String, codeHash: Swift.String, appId: Swift.String, sdkVersion: Swift.String, pushId: Swift.String, deviceModel: Swift.String, isNFC: Swift.Bool, environment: OrigoSDK.OrigoEnvironmentType)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class OrigoDataProvider : OrigoSDK.OrigoDataProviderBase {
  @objc public class func isAppNameValid(_ name: Swift.String, environment: OrigoSDK.OrigoEnvironmentType, completion: @escaping ((Swift.Bool, (any Swift.Error)?) -> Swift.Void))
  @objc public class func getIssuanceToken(_ parameters: OrigoSDK.IssuanceTokenParameters, completion: @escaping ((Swift.Bool, Foundation.NSDictionary, (any Swift.Error)?) -> Swift.Void))
  @objc public class func getIssuanceData(origoEnvironment: OrigoSDK.OrigoEnvironmentType, appName: Swift.String, completion: @escaping ((Swift.Bool, Swift.String, (any Swift.Error)?) -> Swift.Void))
  @objc public class func getReaderList(_ appId: Swift.String, completion: @escaping (([Swift.String]?, (any Swift.Error)?) -> Swift.Void))
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class OrigoDataProviderBase : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class OrigoSymmetricKeyHelper : ObjectiveC.NSObject {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class OrigoSecuredFileStorage : ObjectiveC.NSObject {
  @objc public static func savePhotoImage(urlString: Swift.String, accessToken: Swift.String, completionHandler: @escaping ((Foundation.Data?, (any Swift.Error)?) -> Swift.Void))
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.FileManager {
  public func getCachedPathFromFile(imageURL: Swift.String) -> Foundation.URL?
}
extension Swift.String {
  public func convertedToSlug() -> Swift.String?
  public func fromBase64() -> Swift.String?
  public func toBase64() -> Swift.String?
  public func toBase64Data() -> Foundation.Data?
}
@objc public protocol OrigoLocationSyncDelegate {
  @objc func didFinishLocationUpload(_ success: Swift.Bool)
  @objc func didReachDataRetention()
  @objc func didReceiveRevokedPassCode()
  @objc func sendMixpanelEventForRevoke()
  @objc func didReachMaxLocationThreshold()
  @objc func didFoundInvalidDateTime(_ error: Foundation.NSError)
  @objc func didUpdatedCredential()
}
@_inheritsConvenienceInitializers @objc public class OrigoLocationDataHandler : ObjectiveC.NSObject {
  public var expectedLocationUpdationAt: Swift.Int64
  @objc public class func sharedInstance() -> OrigoSDK.OrigoLocationDataHandler
  @objc public func startLocationDataCollection()
  @objc public func stopLocationDataCollection()
  @objc override dynamic public init()
  @objc deinit
}
extension OrigoSDK.OrigoLocationDataHandler {
  @objc dynamic public func deregisterIdentityPositioning(_ appId: Swift.String, completion: @escaping (_ status: OrigoSDK.OrigoIdentityPositioningTerminationStatus, _ error: Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func getPassStatus(_ appId: Swift.String)
}
extension OrigoSDK.OrigoLocationDataHandler {
  @objc dynamic public func addReader(_ psnList: [Swift.String])
}
extension OrigoSDK.OrigoLocationDataHandler {
  @objc dynamic public func addRegion(_ regionId: Swift.Int)
  @objc dynamic public func updateSiteID(_ siteID: Swift.String)
  @objc dynamic public func removeSiteID(_ siteID: Swift.String)
  @objc dynamic public func removeRegion(_ regionId: Swift.Int)
  @objc dynamic public func addLocation(_ location: CoreLocation.CLLocation)
  @objc dynamic public func setProgessDelegate(_ delegate: any OrigoSDK.OrigoLocationSyncDelegate)
}
extension OrigoSDK.OrigoLocationDataHandler {
  @objc dynamic public func cancelSyncAllLocation()
  @objc dynamic public func postAllLocationData(_ shouldRetry: Swift.Bool, withCompletion completion: (() -> Swift.Void)?)
  @objc dynamic public func syncLocationData()
}
extension OrigoSDK.OrigoLocationDataHandler {
  @objc dynamic public class func siteIDList() -> [Swift.String]
}
@_inheritsConvenienceInitializers @objc public class OrigoLogger : ObjectiveC.NSObject {
  @objc public static func setup()
  @objc public static func enableLogs(_ isEnable: Swift.Bool, withPath: Foundation.URL!)
  @objc public static func logError(_ error: any Swift.Error)
  @objc public static func log(_ message: Swift.String)
  @objc public static func getReportURL() -> [Foundation.URL]
  @objc public static func walletStart()
  @objc public static func startMeasure()
  @objc public static func lapseInternal()
  @objc public static func endInternal()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class PassKitUtil : ObjectiveC.NSObject {
  @objc public static func suppressApplePay()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class OrigoEnvironmentSelectionProvider : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public class func registerForGesture()
  @objc public class func onViewLongPressed(recognizer: UIKit.UILongPressGestureRecognizer)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class OrigoManagedAppConfiguration : ObjectiveC.NSObject {
  @objc public static func getMDMData()
  @objc public static func getMDMEnabled() -> Swift.Bool
  @objc public static func getManagedConfig() -> [Swift.String : Any]
  @objc deinit
}
public typealias AuthorizationCompletion = (Swift.Bool, (any Swift.Error)?) -> ()
extension UIKit.UIWindow : AuthenticationServices.ASWebAuthenticationPresentationContextProviding {
  @available(iOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func presentationAnchor(for session: AuthenticationServices.ASWebAuthenticationSession) -> AuthenticationServices.ASPresentationAnchor
}
@_inheritsConvenienceInitializers @objc public class OrigoAuthorizationProvider : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public class func presentAuthorizationRequest(completion: @escaping (Swift.Bool, (any Swift.Error)?) -> ())
  @objc deinit
}
public typealias Parameters = [Swift.String : Any]
public struct URLParameterEncoder {
  public func encode(urlRequest: inout Foundation.URLRequest, with parameters: OrigoSDK.Parameters)
}
public struct BodyParameterEncoder {
  public func encode(urlRequest: inout Foundation.URLRequest, with parameters: any Swift.Encodable)
}
@objc @_hasMissingDesignatedInitializers public class ReaderScanData : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc required convenience public init(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
@objc public class NearbyReaderDetector : ObjectiveC.NSObject {
  @objc public init(useReaderGeofencing: Swift.Bool, keysManager: OrigoSDK.OrigoKeysManager)
  @objc public func configLocationService()
  @objc public func saveReaderScanData(scanMode: Swift.Int, openingType: [Swift.Int], lockServiceCode: [Swift.Int])
  @objc deinit
}
extension OrigoSDK.NearbyReaderDetector {
  @objc dynamic public func registerSuccessfulUsageOf(_ reader: OrigoSDK.OrigoKeysReader?)
}
extension OrigoSDK.NearbyReaderDetector : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didStartMonitoringFor region: CoreLocation.CLRegion)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didDetermineState state: CoreLocation.CLRegionState, for region: CoreLocation.CLRegion)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didVisit visit: CoreLocation.CLVisit)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didFinishDeferredUpdatesWithError error: (any Swift.Error)?)
  @objc dynamic public func locationManagerDidResumeLocationUpdates(_ manager: CoreLocation.CLLocationManager)
  @objc dynamic public func locationManagerDidPauseLocationUpdates(_ manager: CoreLocation.CLLocationManager)
  @objc dynamic public func locationManagerShouldDisplayHeadingCalibration(_ manager: CoreLocation.CLLocationManager) -> Swift.Bool
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateHeading newHeading: CoreLocation.CLHeading)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, monitoringDidFailFor region: CoreLocation.CLRegion?, withError error: any Swift.Error)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didEnterRegion region: CoreLocation.CLRegion)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didExitRegion region: CoreLocation.CLRegion)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
}
extension OrigoSDK.NearbyReaderDetector : UIKit.UIApplicationDelegate {
  @objc dynamic public func handleApplicationObserver()
}
public typealias OrigoWalletCompletion = (Swift.Array<Any>, (any Swift.Error)?) -> ()
@objc @_hasMissingDesignatedInitializers @available(iOS 13.4, *)
@_Concurrency.MainActor @preconcurrency public class WalletPassViewController : UIKit.UIViewController, PassKit.PKAddSecureElementPassViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc public func addSecureElementPassViewController(_ controller: PassKit.PKAddSecureElementPassViewController, didFinishAdding pass: PassKit.PKSecureElementPass?, error: (any Swift.Error)?)
  @_Concurrency.MainActor @preconcurrency @objc public func addSecureElementPassViewController(_ controller: PassKit.PKAddSecureElementPassViewController, didFinishAddingSecureElementPasses passes: [PassKit.PKSecureElementPass]?, error: (any Swift.Error)?)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
@objc public class OrigoWallet : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public class func isSecureElementAvailable() -> Swift.Bool
  @objc public class func addPass(_ data: Foundation.NSDictionary?, codeHash: Swift.String?, completion: @escaping (OrigoSDK.OrigoWalletCompletion))
  @objc public class func isWindowAvailable() -> Swift.Bool
  @objc public class func getPKPasses() -> [PassKit.PKPass]
  @objc public class func getPKRemotePasses() -> [PassKit.PKSecureElementPass]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OrigoReachability {
  @objc deinit
}
public protocol SecureStoreQueryable {
  var query: [Swift.String : Any] { get }
}
public struct GenericPasswordQueryable {
}
extension OrigoSDK.GenericPasswordQueryable : OrigoSDK.SecureStoreQueryable {
  public var query: [Swift.String : Any] {
    get
  }
}
public struct OrigoKeyChainHelper {
  public init(secureStoreQueryable: any OrigoSDK.SecureStoreQueryable)
  public func setValue(_ value: Foundation.Data, for userAccount: Swift.String) throws
  public func getValue(for userAccount: Swift.String, forFirstUnlock: Swift.Bool = false) throws -> Foundation.Data?
  public func removeValue(for userAccount: Swift.String) throws
  public func removeAllValues(_ withAccessSpecific: Swift.Bool = true) throws
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
public enum HTTPMethod : Swift.String {
  case get
  case post
  case put
  case patch
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor @preconcurrency public var modelName: Swift.String {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var osVersion: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class DiagnosticsLogger {
  public static func isSetUp() -> Swift.Bool
  public static func setup() throws
  public static func logFileLocationPath() -> [Foundation.URL]
  public static func enableLogs(isEnable: Swift.Bool, withPath: Foundation.URL!)
  public static func log(message: Swift.String, file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.UInt = #line)
  public static func log(error: any Swift.Error, description: Swift.String? = nil, file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.UInt = #line)
  @objc deinit
}
@objc extension OrigoSDK.OrigoKeysManager {
  @objc public static func setupMelAnalytics(appId: Swift.String, apiKey: Swift.String, invitationHashCode: Swift.String) -> (any OrigoMelSDK.MelAnalyticsBaseAPI)?
}
extension OrigoSDK.HTTPStatusCode : Swift.Equatable {}
extension OrigoSDK.HTTPStatusCode : Swift.Hashable {}
extension OrigoSDK.HTTPStatusCode : Swift.RawRepresentable {}
extension OrigoSDK.SymmetricKey.SymmetricKeyError : Swift.Equatable {}
extension OrigoSDK.SymmetricKey.SymmetricKeyError : Swift.Hashable {}
extension OrigoSDK.OrigoKeysNetworkErrorCode : Swift.Equatable {}
extension OrigoSDK.OrigoKeysNetworkErrorCode : Swift.Hashable {}
extension OrigoSDK.OrigoKeysNetworkErrorCode : Swift.RawRepresentable {}
extension OrigoSDK.OrigoKeysPassKitErrorCode : Swift.Equatable {}
extension OrigoSDK.OrigoKeysPassKitErrorCode : Swift.Hashable {}
extension OrigoSDK.OrigoKeysPassKitErrorCode : Swift.RawRepresentable {}
extension OrigoSDK.OrigoKeysSecureElementAddPassErrorCode : Swift.Equatable {}
extension OrigoSDK.OrigoKeysSecureElementAddPassErrorCode : Swift.Hashable {}
extension OrigoSDK.OrigoKeysSecureElementAddPassErrorCode : Swift.RawRepresentable {}
extension OrigoSDK.HTTPMethod : Swift.Equatable {}
extension OrigoSDK.HTTPMethod : Swift.Hashable {}
extension OrigoSDK.HTTPMethod : Swift.RawRepresentable {}
