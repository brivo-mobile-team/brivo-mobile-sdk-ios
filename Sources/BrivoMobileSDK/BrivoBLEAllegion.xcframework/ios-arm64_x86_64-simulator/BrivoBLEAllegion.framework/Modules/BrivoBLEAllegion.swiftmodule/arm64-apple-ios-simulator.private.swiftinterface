// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios17-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name BrivoBLEAllegion
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import BrivoBLE
@_exported import BrivoBLEAllegion
import BrivoCore
import BrivoNetworkCore
import BrivoOnAir
import Combine
import Foundation
import Network
import Swift
import SwiftData
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension BrivoBLEAllegion.BrivoSDKBLEAllegion {
  public struct State : Swift.Equatable, Swift.Sendable {
    public var activeOperation: BrivoBLEAllegion.BrivoSDKBLEAllegion.ActiveOperation
    public var passesSynchroniseStatus: [Swift.String : BrivoBLEAllegion.BrivoSDKBLEAllegion.SynchroniseStatus]
    public init(activeOperation: BrivoBLEAllegion.BrivoSDKBLEAllegion.ActiveOperation, passesSynchroniseStatus: [Swift.String : BrivoBLEAllegion.BrivoSDKBLEAllegion.SynchroniseStatus])
    public static func == (a: BrivoBLEAllegion.BrivoSDKBLEAllegion.State, b: BrivoBLEAllegion.BrivoSDKBLEAllegion.State) -> Swift.Bool
  }
  public enum SynchroniseStatus : Swift.Equatable, Swift.Sendable {
    case unknown
    case success([BrivoBLEAllegion.LockStatus])
    case failure
    public static func == (a: BrivoBLEAllegion.BrivoSDKBLEAllegion.SynchroniseStatus, b: BrivoBLEAllegion.BrivoSDKBLEAllegion.SynchroniseStatus) -> Swift.Bool
  }
  public enum ActiveOperation : Swift.Sendable {
    case none
    case initialising
    case refreshing
    case unlocking
    public static func == (a: BrivoBLEAllegion.BrivoSDKBLEAllegion.ActiveOperation, b: BrivoBLEAllegion.BrivoSDKBLEAllegion.ActiveOperation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public enum RefreshType {
  case ignoringLocalCacheData
  case validatingCacheData
  public static func == (a: BrivoBLEAllegion.RefreshType, b: BrivoBLEAllegion.RefreshType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol IBrivoSDKBLEAllegion {
  var sdkState: BrivoBLEAllegion.BrivoSDKBLEAllegion.State { get }
  var sdkStates: _Concurrency.AsyncStream<BrivoBLEAllegion.BrivoSDKBLEAllegion.State> { get }
  init(configuration: BrivoBLEAllegion.BrivoBLEAllegionConfiguration)
  func refreshCredentials(brivoOnAirPasses: [BrivoOnAir.BrivoOnairPass], refreshType: BrivoBLEAllegion.RefreshType) async -> Swift.Result<Swift.Void, BrivoCore.BrivoError>
  func unlockAccessPoint(accessPoint: BrivoOnAir.BrivoSelectedAccessPoint, cancellationSignal: BrivoCore.CancellationSignal?) -> _Concurrency.AsyncStream<BrivoCore.BrivoResult>
  func clearCredentials() async -> Swift.Result<Swift.Void, BrivoCore.BrivoError>
}
public struct AllegionControlLocks : Swift.Codable {
  public let allegionControlLocks: [BrivoBLEAllegion.AllegionControlLockStatus]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AllegionControlLockStatus : Swift.Codable {
  public let id: Swift.Int
  public let isEligible: Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class Event {
  public var persistentBackingData: any SwiftData.BackingData<BrivoBLEAllegion.Event> {
    get
    set
  }
  public static var schemaMetadata: [SwiftData.Schema.PropertyMetadata] {
    get
  }
  required public init(backingData: any SwiftData.BackingData<BrivoBLEAllegion.Event>)
  @objc deinit
}
extension BrivoBLEAllegion.Event : SwiftData.PersistentModel {
  public typealias ID = SwiftData.PersistentIdentifier
  public var hashValue: Swift.Int {
    get
  }
}
extension BrivoBLEAllegion.Event : Observation.Observable {
}
@available(swift, deprecated: 5.9, message: "PersistentModels are not Sendable, consider utilizing a ModelActor or use Event's persistentModelID instead")
@available(*, unavailable, message: "PersistentModels are not Sendable, consider utilizing a ModelActor or use Event's persistentModelID instead")
extension BrivoBLEAllegion.Event : Swift.Sendable {
}
final public class BrivoSDKBLEAllegion : BrivoBLEAllegion.IBrivoSDKBLEAllegion {
  @Combine.Published @_projectedValueProperty($sdkState) final public var sdkState: BrivoBLEAllegion.BrivoSDKBLEAllegion.State {
    get
  }
  final public var $sdkState: Combine.Published<BrivoBLEAllegion.BrivoSDKBLEAllegion.State>.Publisher {
    get
  }
  final public var sdkStates: _Concurrency.AsyncStream<BrivoBLEAllegion.BrivoSDKBLEAllegion.State> {
    get
  }
  public static let instance: BrivoBLEAllegion.BrivoSDKBLEAllegion
  public init(configuration: BrivoBLEAllegion.BrivoBLEAllegionConfiguration = .default)
  final public func unlockAccessPoint(accessPoint: BrivoOnAir.BrivoSelectedAccessPoint, cancellationSignal: BrivoCore.CancellationSignal?) -> _Concurrency.AsyncStream<BrivoCore.BrivoResult>
  @_Concurrency.MainActor final public func refreshCredentials(brivoOnAirPasses: [BrivoOnAir.BrivoOnairPass], refreshType: BrivoBLEAllegion.RefreshType) async -> Swift.Result<Swift.Void, BrivoCore.BrivoError>
  @_Concurrency.MainActor final public func clearCredentials() async -> Swift.Result<Swift.Void, BrivoCore.BrivoError>
  @objc deinit
}
public struct LockStatus : Swift.Codable, Swift.Equatable, Swift.Sendable {
  public var lockId: Swift.Int
  public var isEligible: Swift.Bool
  public init(lockId: Swift.Int, isEligible: Swift.Bool)
  public static func == (a: BrivoBLEAllegion.LockStatus, b: BrivoBLEAllegion.LockStatus) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BrivoBLEAllegionConfiguration {
  public var subscriptionKey: Swift.String
  public var integrationId: Swift.String
  public static var `default`: BrivoBLEAllegion.BrivoBLEAllegionConfiguration
}
public struct AllegionSDKTokens : Swift.Codable {
  public var idToken: Swift.String
  public var accessToken: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension BrivoBLEAllegion.BrivoSDKBLEAllegion.ActiveOperation : Swift.Equatable {}
extension BrivoBLEAllegion.BrivoSDKBLEAllegion.ActiveOperation : Swift.Hashable {}
extension BrivoBLEAllegion.RefreshType : Swift.Equatable {}
extension BrivoBLEAllegion.RefreshType : Swift.Hashable {}
